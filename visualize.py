#!/usr/bin/env python3

"""
Script to decode tokenized video into images/video.
Example usage: See https://github.com/1x-technologies/1xgpt?tab=readme-ov-file#1x-genie-baseline
"""

import argparse
import math
import os
from PIL import Image, ImageDraw

import numpy as np
import torch
import torch.distributed.optim
import torch.utils.checkpoint
import torch.utils.data
import torchvision.transforms.v2.functional as transforms_f
from einops import rearrange
from matplotlib import pyplot as plt

from data import RawTokenDataset
from magvit2.config import VQConfig
from magvit2.models.lfqgan import VQModel
from train_depth.Magvit2Dpt import Magvit2Dpt


def parse_args():
    parser = argparse.ArgumentParser(description="Visualize tokenized video as GIF or comic.")
    parser.add_argument(
        "--stride",
        type=int,
        default=1,
        help="Frame skip",
    )
    parser.add_argument(
        "--token_dir",
        type=str,
        default="data/genie_generated",
        help="Directory of tokens, in the format of `video.bin` and `metadata.json`. "
             "Visualized gif and comic will be written here.",
    )
    parser.add_argument(
        "--tokenizer_ckpt",
        type=str,
        default="data/magvit2.ckpt",
        help="Path of the ckpt file of magvit2"
    )
    parser.add_argument(
        "--depth_decoder_ckpt",
        type=str,
        default="data/magvit2dpt_0.pth",
        help="Path of the ckpt file of depth decoder"
    )
    parser.add_argument(
        "--offset", type=int, default=0, help="Offset to start generating images from"
    )
    parser.add_argument(
        "--fps", type=int, default=2, help="Frames per second"
    )
    parser.add_argument(
        "--max_images", type=int, default=None, help="Maximum number of images to generate. None for all."
    )
    parser.add_argument(
        "--generated_data", action="store_true",
        help="Comic generation assumes `token_dir` follows the same format as generate: e.g., "
             "`prompt | predictions | gtruth` in `video.bin`, `window_size` in `metadata.json`."
             "Therefore, comic should be enabled when visualizing videosgenerated by the model"
    )
    args = parser.parse_args()

    return args


def export_to_gif(frames: list, output_gif_path: str, fps: int):
    """
    Export a list of frames to a GIF.

    Args:
    - frames (list): List of frames (as numpy arrays or PIL Image objects).
    - output_gif_path (str): Path to save the output GIF.
    - fps (int): Desired frames per second.
    """
    # Convert numpy arrays to PIL Images if needed
    pil_frames = [Image.fromarray(frame) if isinstance(
        frame, np.ndarray) else frame for frame in frames]

    duration_ms = 1000 / fps
    pil_frames[0].save(output_gif_path.replace(".mp4", ".gif"),
                       format="GIF",
                       append_images=pil_frames[1:],
                       save_all=True,
                       duration=duration_ms,
                       loop=0)


def rescale_magvit_output(magvit_output):
    """
    [-1, 1] -> [0, 255]

    Important: clip to [0, 255]
    """
    rescaled_output = ((magvit_output.detach().cpu() + 1) * 127.5)
    clipped_output = torch.clamp(rescaled_output, 0, 255).to(dtype=torch.uint8)
    return clipped_output


def decode_latents_wrapper(
        batch_size=16, 
        tokenizer_ckpt='data/magvit2.ckpt', 
        depth_decoder_ckpt='data/depth_decoder.ckpt', 
        genie_config='genie/configs/magvit_n32_h8_d256.json',
        window_size=16,
        latent_side_len=25,
        max_images=None
    ):
    device = "cuda"

    magvit_config = VQConfig()
    magvit = VQModel(magvit_config, ckpt_path=tokenizer_ckpt)
    magvit = magvit.to(device=device, dtype=torch.bfloat16)

    magvit2dpt = Magvit2Dpt(
        genie_config=genie_config,
        maskgit_steps=1,
        window_size=window_size,
        latent_side_len=latent_side_len,
        use_genie=False,
        freeze_dpt=True,
    ).to(device)
    magvit2dpt.load_state_dict(torch.load(depth_decoder_ckpt))

    @torch.no_grad()
    def decode_latents(video_data):
        """
        video_data: (b, h, w), where b is different from training/eval batch size.
        """
        decoded_imgs = []
        decoded_depth = []

        for shard_ind in range(math.ceil(len(video_data) / batch_size)):
            batch = torch.from_numpy(video_data[shard_ind * batch_size: (shard_ind + 1) * batch_size].astype(np.int64))
            if magvit.use_ema:
                with magvit.ema_scope():
                    quant = magvit.quantize.get_codebook_entry(rearrange(batch, "b h w -> b (h w)"),
                                                              bhwc=batch.shape + (magvit.quantize.codebook_dim,)).flip(1)
                    quant = quant.to(device=device, dtype=torch.bfloat16)
                    decoded_imgs.append(((rescale_magvit_output(magvit.decode(quant)))))
                    decoded_depth.append(magvit2dpt.decode(quant))
            if max_images and len(decoded_imgs) * batch_size >= max_images:
                break

        decoded_imgs = [img.permute(1, 2, 0).numpy() for img in torch.cat(decoded_imgs)]
        decoded_depth = transforms_f.resize(torch.cat(decoded_depth), decoded_imgs[0].shape[:-1])
        decoded_depth = [depth.cpu().numpy() for depth in decoded_depth]
        return decoded_imgs, decoded_depth

    return decode_latents


def caption_image(pil_image: Image, caption: str):
    """
    Add a bit of empty space at the top, and add the caption there
    """
    border_size = 36
    font_size = 24

    width, height = pil_image.size
    new_width = width
    new_height = height + border_size

    new_image = Image.new("RGB", (new_width, new_height), "white")
    new_image.paste(pil_image, (0, border_size))

    # Draw the caption
    draw = ImageDraw.Draw(new_image)

    # Center text (`align` keyword doesn't work)
    _, _, text_w, text_h = draw.textbbox((0, 0), caption, font_size=font_size)
    draw.text(((width - text_w) / 2, (border_size - text_h) / 2), caption, fill="black", font_size=font_size)

    return new_image

def combine_rgb_depth(rgb_frames, depth_frames):
    combined_frames = []
    for rgb_frame, depth_frame in zip(rgb_frames, depth_frames):
        plt.imshow(depth_frame)
        plt.axis('off')
        plt.savefig('temp_depth.png', bbox_inches='tight', pad_inches=0)
        plt.close()
        pseudo_color_image = Image.open('temp_depth.png')
        rgb_image_pil = Image.fromarray(rgb_frame)
        pseudo_color_image = pseudo_color_image.resize(rgb_image_pil.size)
        combined_image = Image.new('RGB', (rgb_image_pil.width + pseudo_color_image.width, rgb_image_pil.height))
        combined_image.paste(rgb_image_pil, (0, 0))
        combined_image.paste(pseudo_color_image, (rgb_image_pil.width, 0))
        combined_frames.append(combined_image)
    return combined_frames

@torch.no_grad()
def main():
    args = parse_args()

    # Load tokens
    token_dataset = RawTokenDataset(args.token_dir, 1, filter_interrupts=False, filter_overlaps=False)
    video_tokens = token_dataset.data
    metadata = token_dataset.metadata

    video_frames, depth_frames = decode_latents_wrapper(
        max_images=args.max_images, 
        tokenizer_ckpt=args.tokenizer_ckpt,
        depth_decoder_ckpt=args.depth_decoder_ckpt,
    )(video_tokens[args.offset::args.stride])
    video_frames = combine_rgb_depth(video_frames, depth_frames)
    output_gif_path = os.path.join(args.token_dir, f"generated_offset{args.offset}.gif")

    # `generate` should populate `metadata.json` with these keys, while ground truth metadata does not have them
    is_generated_data = all(key in metadata for key in ("num_prompt_frames", "window_size"))
    if is_generated_data:
        if video_tokens.shape[0] != metadata["window_size"] * 2 - metadata["num_prompt_frames"]:
            raise ValueError(f"Unexpected {video_tokens.shape=} given {metadata['window_size']=}, {metadata['num_prompt_frames']=}")

        captioned_frames = []
        for i, frame in enumerate(video_frames):
            if i < metadata["num_prompt_frames"]:
                caption = "Prompt"
            elif i < metadata["window_size"]:
                caption = "Generated"
            else:
                caption = "Ground truth"

            captioned_frames.append(caption_image(frame, caption))
    else:
        # Leave ground truth frames uncaptioned
        captioned_frames = video_frames

    export_to_gif(captioned_frames, output_gif_path, args.fps)
    print(f"Saved to {output_gif_path}")

    if args.generated_data:
        fig, axs = plt.subplots(nrows=2, ncols=metadata["window_size"], figsize=(3 * 2 * metadata["window_size"], 3 * 2))
        for i, image in enumerate(video_frames):
            if i < metadata["num_prompt_frames"]:
                curr_axs = [axs[0, i], axs[1, i]]
                title = "Prompt"

            elif i < metadata["window_size"]:
                curr_axs = [axs[0, i]]
                title = "Prediction"
            else:
                curr_axs = [axs[1, i - metadata["window_size"] + metadata["num_prompt_frames"]]]
                title = "Ground truth"

            for ax in curr_axs:
                ax.set_title(title)
                ax.imshow(image)
                ax.axis("off")

        output_comic_path = os.path.join(args.token_dir, f"generated_comic_offset{args.offset}.png")
        plt.savefig(output_comic_path, bbox_inches="tight")
        plt.close()
        print(f"Saved to {output_comic_path}")


if __name__ == "__main__":
    main()
